# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ros_pololu_servo/MotorCalibration.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class MotorCalibration(genpy.Message):
  _md5sum = "243cff09419a3549991196c6e5684b74"
  _type = "ros_pololu_servo/MotorCalibration"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32 min_pulse             # Minimum pwm pulse
float64 min_radians         # Radians corresponding to min pwm pulse
float64 min_degrees         # Degrees corresponding to min pwm pulse
int32 max_pulse             # Maximum pwm pulse
float64 max_radians         # Radians corresponding to max pwm pulse
float64 max_degrees         # Degrees corresponding to max pwm pulse"""
  __slots__ = ['min_pulse','min_radians','min_degrees','max_pulse','max_radians','max_degrees']
  _slot_types = ['int32','float64','float64','int32','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       min_pulse,min_radians,min_degrees,max_pulse,max_radians,max_degrees

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MotorCalibration, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.min_pulse is None:
        self.min_pulse = 0
      if self.min_radians is None:
        self.min_radians = 0.
      if self.min_degrees is None:
        self.min_degrees = 0.
      if self.max_pulse is None:
        self.max_pulse = 0
      if self.max_radians is None:
        self.max_radians = 0.
      if self.max_degrees is None:
        self.max_degrees = 0.
    else:
      self.min_pulse = 0
      self.min_radians = 0.
      self.min_degrees = 0.
      self.max_pulse = 0
      self.max_radians = 0.
      self.max_degrees = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_i2di2d().pack(_x.min_pulse, _x.min_radians, _x.min_degrees, _x.max_pulse, _x.max_radians, _x.max_degrees))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 40
      (_x.min_pulse, _x.min_radians, _x.min_degrees, _x.max_pulse, _x.max_radians, _x.max_degrees,) = _get_struct_i2di2d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_i2di2d().pack(_x.min_pulse, _x.min_radians, _x.min_degrees, _x.max_pulse, _x.max_radians, _x.max_degrees))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 40
      (_x.min_pulse, _x.min_radians, _x.min_degrees, _x.max_pulse, _x.max_radians, _x.max_degrees,) = _get_struct_i2di2d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_i2di2d = None
def _get_struct_i2di2d():
    global _struct_i2di2d
    if _struct_i2di2d is None:
        _struct_i2di2d = struct.Struct("<i2di2d")
    return _struct_i2di2d
