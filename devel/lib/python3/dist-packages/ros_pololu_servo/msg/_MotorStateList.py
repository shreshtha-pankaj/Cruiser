# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ros_pololu_servo/MotorStateList.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import ros_pololu_servo.msg

class MotorStateList(genpy.Message):
  _md5sum = "f59501f919a1edaba3d8a1c194971202"
  _type = "ros_pololu_servo/MotorStateList"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """ros_pololu_servo/MotorState[] motor_states

================================================================================
MSG: ros_pololu_servo/MotorState
string name                                     # Name of the servo (specified in the yaml file)
int8 pololu_id                                  # id of the Pololu board (12 by default)
int8 motor_id                                   # id of the servo on the Pololu board
int32 pulse                                     # Pwm servo pulse
float64 radians                                 # Current position of the servo in radians
float64 degrees                                 # Current position of the servo in degrees
ros_pololu_servo/MotorCalibration calibration   # Servo calibration
================================================================================
MSG: ros_pololu_servo/MotorCalibration
int32 min_pulse             # Minimum pwm pulse
float64 min_radians         # Radians corresponding to min pwm pulse
float64 min_degrees         # Degrees corresponding to min pwm pulse
int32 max_pulse             # Maximum pwm pulse
float64 max_radians         # Radians corresponding to max pwm pulse
float64 max_degrees         # Degrees corresponding to max pwm pulse"""
  __slots__ = ['motor_states']
  _slot_types = ['ros_pololu_servo/MotorState[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       motor_states

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MotorStateList, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.motor_states is None:
        self.motor_states = []
    else:
      self.motor_states = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.motor_states)
      buff.write(_struct_I.pack(length))
      for val1 in self.motor_states:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_get_struct_2bi2d().pack(_x.pololu_id, _x.motor_id, _x.pulse, _x.radians, _x.degrees))
        _v1 = val1.calibration
        _x = _v1
        buff.write(_get_struct_i2di2d().pack(_x.min_pulse, _x.min_radians, _x.min_degrees, _x.max_pulse, _x.max_radians, _x.max_degrees))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.motor_states is None:
        self.motor_states = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.motor_states = []
      for i in range(0, length):
        val1 = ros_pololu_servo.msg.MotorState()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8')
        else:
          val1.name = str[start:end]
        _x = val1
        start = end
        end += 22
        (_x.pololu_id, _x.motor_id, _x.pulse, _x.radians, _x.degrees,) = _get_struct_2bi2d().unpack(str[start:end])
        _v2 = val1.calibration
        _x = _v2
        start = end
        end += 40
        (_x.min_pulse, _x.min_radians, _x.min_degrees, _x.max_pulse, _x.max_radians, _x.max_degrees,) = _get_struct_i2di2d().unpack(str[start:end])
        self.motor_states.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.motor_states)
      buff.write(_struct_I.pack(length))
      for val1 in self.motor_states:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_get_struct_2bi2d().pack(_x.pololu_id, _x.motor_id, _x.pulse, _x.radians, _x.degrees))
        _v3 = val1.calibration
        _x = _v3
        buff.write(_get_struct_i2di2d().pack(_x.min_pulse, _x.min_radians, _x.min_degrees, _x.max_pulse, _x.max_radians, _x.max_degrees))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.motor_states is None:
        self.motor_states = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.motor_states = []
      for i in range(0, length):
        val1 = ros_pololu_servo.msg.MotorState()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8')
        else:
          val1.name = str[start:end]
        _x = val1
        start = end
        end += 22
        (_x.pololu_id, _x.motor_id, _x.pulse, _x.radians, _x.degrees,) = _get_struct_2bi2d().unpack(str[start:end])
        _v4 = val1.calibration
        _x = _v4
        start = end
        end += 40
        (_x.min_pulse, _x.min_radians, _x.min_degrees, _x.max_pulse, _x.max_radians, _x.max_degrees,) = _get_struct_i2di2d().unpack(str[start:end])
        self.motor_states.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_i2di2d = None
def _get_struct_i2di2d():
    global _struct_i2di2d
    if _struct_i2di2d is None:
        _struct_i2di2d = struct.Struct("<i2di2d")
    return _struct_i2di2d
_struct_2bi2d = None
def _get_struct_2bi2d():
    global _struct_2bi2d
    if _struct_2bi2d is None:
        _struct_2bi2d = struct.Struct("<2bi2d")
    return _struct_2bi2d
