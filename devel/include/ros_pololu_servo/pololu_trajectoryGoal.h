// Generated by gencpp from file ros_pololu_servo/pololu_trajectoryGoal.msg
// DO NOT EDIT!


#ifndef ROS_POLOLU_SERVO_MESSAGE_POLOLU_TRAJECTORYGOAL_H
#define ROS_POLOLU_SERVO_MESSAGE_POLOLU_TRAJECTORYGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <trajectory_msgs/JointTrajectory.h>

namespace ros_pololu_servo
{
template <class ContainerAllocator>
struct pololu_trajectoryGoal_
{
  typedef pololu_trajectoryGoal_<ContainerAllocator> Type;

  pololu_trajectoryGoal_()
    : joint_trajectory()  {
    }
  pololu_trajectoryGoal_(const ContainerAllocator& _alloc)
    : joint_trajectory(_alloc)  {
  (void)_alloc;
    }



   typedef  ::trajectory_msgs::JointTrajectory_<ContainerAllocator>  _joint_trajectory_type;
  _joint_trajectory_type joint_trajectory;





  typedef boost::shared_ptr< ::ros_pololu_servo::pololu_trajectoryGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_pololu_servo::pololu_trajectoryGoal_<ContainerAllocator> const> ConstPtr;

}; // struct pololu_trajectoryGoal_

typedef ::ros_pololu_servo::pololu_trajectoryGoal_<std::allocator<void> > pololu_trajectoryGoal;

typedef boost::shared_ptr< ::ros_pololu_servo::pololu_trajectoryGoal > pololu_trajectoryGoalPtr;
typedef boost::shared_ptr< ::ros_pololu_servo::pololu_trajectoryGoal const> pololu_trajectoryGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_pololu_servo::pololu_trajectoryGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_pololu_servo::pololu_trajectoryGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ros_pololu_servo

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsMessage': True, 'IsFixedSize': False, 'HasHeader': False}
// {'ros_pololu_servo': ['/home/karan/advanced_robotics_ws/src/ros_pololu/src/ros_pololu_servo/msg', '/home/karan/advanced_robotics_ws/devel/share/ros_pololu_servo/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'trajectory_msgs': ['/opt/ros/kinetic/share/trajectory_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsMessage< ::ros_pololu_servo::pololu_trajectoryGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_pololu_servo::pololu_trajectoryGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_pololu_servo::pololu_trajectoryGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_pololu_servo::pololu_trajectoryGoal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_pololu_servo::pololu_trajectoryGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_pololu_servo::pololu_trajectoryGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_pololu_servo::pololu_trajectoryGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "00c4170f44c26e68c1de38303b04fb23";
  }

  static const char* value(const ::ros_pololu_servo::pololu_trajectoryGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x00c4170f44c26e68ULL;
  static const uint64_t static_value2 = 0xc1de38303b04fb23ULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_pololu_servo::pololu_trajectoryGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_pololu_servo/pololu_trajectoryGoal";
  }

  static const char* value(const ::ros_pololu_servo::pololu_trajectoryGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_pololu_servo::pololu_trajectoryGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
# Define goal\n\
trajectory_msgs/JointTrajectory joint_trajectory\n\
\n\
================================================================================\n\
MSG: trajectory_msgs/JointTrajectory\n\
Header header\n\
string[] joint_names\n\
JointTrajectoryPoint[] points\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: trajectory_msgs/JointTrajectoryPoint\n\
# Each trajectory point specifies either positions[, velocities[, accelerations]]\n\
# or positions[, effort] for the trajectory to be executed.\n\
# All specified values are in the same order as the joint names in JointTrajectory.msg\n\
\n\
float64[] positions\n\
float64[] velocities\n\
float64[] accelerations\n\
float64[] effort\n\
duration time_from_start\n\
";
  }

  static const char* value(const ::ros_pololu_servo::pololu_trajectoryGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_pololu_servo::pololu_trajectoryGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.joint_trajectory);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct pololu_trajectoryGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_pololu_servo::pololu_trajectoryGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_pololu_servo::pololu_trajectoryGoal_<ContainerAllocator>& v)
  {
    s << indent << "joint_trajectory: ";
    s << std::endl;
    Printer< ::trajectory_msgs::JointTrajectory_<ContainerAllocator> >::stream(s, indent + "  ", v.joint_trajectory);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_POLOLU_SERVO_MESSAGE_POLOLU_TRAJECTORYGOAL_H
