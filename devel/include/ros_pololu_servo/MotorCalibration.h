// Generated by gencpp from file ros_pololu_servo/MotorCalibration.msg
// DO NOT EDIT!


#ifndef ROS_POLOLU_SERVO_MESSAGE_MOTORCALIBRATION_H
#define ROS_POLOLU_SERVO_MESSAGE_MOTORCALIBRATION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ros_pololu_servo
{
template <class ContainerAllocator>
struct MotorCalibration_
{
  typedef MotorCalibration_<ContainerAllocator> Type;

  MotorCalibration_()
    : min_pulse(0)
    , min_radians(0.0)
    , min_degrees(0.0)
    , max_pulse(0)
    , max_radians(0.0)
    , max_degrees(0.0)  {
    }
  MotorCalibration_(const ContainerAllocator& _alloc)
    : min_pulse(0)
    , min_radians(0.0)
    , min_degrees(0.0)
    , max_pulse(0)
    , max_radians(0.0)
    , max_degrees(0.0)  {
  (void)_alloc;
    }



   typedef int32_t _min_pulse_type;
  _min_pulse_type min_pulse;

   typedef double _min_radians_type;
  _min_radians_type min_radians;

   typedef double _min_degrees_type;
  _min_degrees_type min_degrees;

   typedef int32_t _max_pulse_type;
  _max_pulse_type max_pulse;

   typedef double _max_radians_type;
  _max_radians_type max_radians;

   typedef double _max_degrees_type;
  _max_degrees_type max_degrees;





  typedef boost::shared_ptr< ::ros_pololu_servo::MotorCalibration_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_pololu_servo::MotorCalibration_<ContainerAllocator> const> ConstPtr;

}; // struct MotorCalibration_

typedef ::ros_pololu_servo::MotorCalibration_<std::allocator<void> > MotorCalibration;

typedef boost::shared_ptr< ::ros_pololu_servo::MotorCalibration > MotorCalibrationPtr;
typedef boost::shared_ptr< ::ros_pololu_servo::MotorCalibration const> MotorCalibrationConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_pololu_servo::MotorCalibration_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_pololu_servo::MotorCalibration_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ros_pololu_servo

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsMessage': True, 'IsFixedSize': True, 'HasHeader': False}
// {'ros_pololu_servo': ['/home/karan/advanced_robotics_ws/src/ros_pololu/src/ros_pololu_servo/msg', '/home/karan/advanced_robotics_ws/devel/share/ros_pololu_servo/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'trajectory_msgs': ['/opt/ros/kinetic/share/trajectory_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsMessage< ::ros_pololu_servo::MotorCalibration_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_pololu_servo::MotorCalibration_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_pololu_servo::MotorCalibration_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_pololu_servo::MotorCalibration_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_pololu_servo::MotorCalibration_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_pololu_servo::MotorCalibration_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_pololu_servo::MotorCalibration_<ContainerAllocator> >
{
  static const char* value()
  {
    return "243cff09419a3549991196c6e5684b74";
  }

  static const char* value(const ::ros_pololu_servo::MotorCalibration_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x243cff09419a3549ULL;
  static const uint64_t static_value2 = 0x991196c6e5684b74ULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_pololu_servo::MotorCalibration_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_pololu_servo/MotorCalibration";
  }

  static const char* value(const ::ros_pololu_servo::MotorCalibration_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_pololu_servo::MotorCalibration_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 min_pulse             # Minimum pwm pulse\n\
float64 min_radians         # Radians corresponding to min pwm pulse\n\
float64 min_degrees         # Degrees corresponding to min pwm pulse\n\
int32 max_pulse             # Maximum pwm pulse\n\
float64 max_radians         # Radians corresponding to max pwm pulse\n\
float64 max_degrees         # Degrees corresponding to max pwm pulse\n\
";
  }

  static const char* value(const ::ros_pololu_servo::MotorCalibration_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_pololu_servo::MotorCalibration_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.min_pulse);
      stream.next(m.min_radians);
      stream.next(m.min_degrees);
      stream.next(m.max_pulse);
      stream.next(m.max_radians);
      stream.next(m.max_degrees);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MotorCalibration_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_pololu_servo::MotorCalibration_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_pololu_servo::MotorCalibration_<ContainerAllocator>& v)
  {
    s << indent << "min_pulse: ";
    Printer<int32_t>::stream(s, indent + "  ", v.min_pulse);
    s << indent << "min_radians: ";
    Printer<double>::stream(s, indent + "  ", v.min_radians);
    s << indent << "min_degrees: ";
    Printer<double>::stream(s, indent + "  ", v.min_degrees);
    s << indent << "max_pulse: ";
    Printer<int32_t>::stream(s, indent + "  ", v.max_pulse);
    s << indent << "max_radians: ";
    Printer<double>::stream(s, indent + "  ", v.max_radians);
    s << indent << "max_degrees: ";
    Printer<double>::stream(s, indent + "  ", v.max_degrees);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_POLOLU_SERVO_MESSAGE_MOTORCALIBRATION_H
